import unittestfrom run import appimport jsonclass RunningTest(unittest.TestCase):    def testRunning(self):        tester = app.test_client(self)        response = tester.get('/')        self.assertEqual(response.status_code, 200)class RegisterTest(unittest.TestCase):    def testInvalidEmail(self):        tester = app.test_client(self)        data = {            "email": "abcde",            "username": "adam",            "password": "Jhu36U1p",            "age": "18",            "gender": "M"        }        data = json.dumps(data)        response = tester.post('/register', data=data, content_type='application/json')        self.assertTrue('Please enter a valid email address.' in response.data)    def testInvalidUsername(self):        tester = app.test_client(self)        data = {            "email": "admin@example.com",            "username": "1/.*",            "password": "Jhu36U1p",            "age": "18",            "gender": "M"        }        data = json.dumps(data)        response = tester.post('/register', data=data, content_type='application/json')        self.assertTrue('Please enter a valid username.' in response.data)    def testWeakPassword(self):        tester = app.test_client(self)        data = {            "email": "example@example.com",            "username": "mike",            "password": "123",            "age": "18",            "gender": "M"        }        data = json.dumps(data)        response = tester.post('/register', data=data, content_type='application/json')        self.assertTrue('Your password is to weak, please try again.' in response.data)    def testCorrectRegister(self):        tester = app.test_client(self)        data = {            "email": "example@example.com",            "username": "mike",            "password": "Jhu36U1p",            "age": "18",            "gender": "M"        }        data = json.dumps(data)        response = tester.post('/register', data=data, content_type='application/json')        self.assertTrue('Registration successful!' in response.data)    def testUsedEmail(self):        tester = app.test_client(self)        data = {            "email": "example@example.com",            "username": "adam",            "password": "Jhu36U1p",            "age": "18",            "gender": "M"        }        data = json.dumps(data)        response = tester.post('/register', data=data, content_type='application/json')        self.assertTrue('Email address has already been taken.' in response.data)    def testUsedUsername(self):        tester = app.test_client(self)        data = {            "email": "example2@example.com",            "username": "mike",            "password": "Jhu36U1p",            "age": "18",            "gender": "M"        }        data = json.dumps(data)        response = tester.post('/register', data=data, content_type='application/json')        self.assertTrue('Username has already been taken.' in response.data)    def testLoginWithIncorrectInfo(self):        tester = app.test_client(self)        data = {            "login": "mike",            "password": "abcdefg"        }        data = json.dumps(data)        response = tester.post('/login', data=data, content_type='application/json')        self.assertTrue('Invalid username or password.' in response.data)    def testAccessWithoutLogin(self):        tester = app.test_client(self)        response = tester.get('/get_profile')        self.assertTrue('Unauthorized, please try to login.' in response.data)    def testLoginManagement(self):        tester = app.test_client(self)        data = {            "login": "mike",            "password": "Jhu36U1p"        }        data = json.dumps(data)        response = tester.post('/login', data=data, content_type='application/json')        self.assertTrue('Logged in successfully.' in response.data)        response = tester.get('/get_profile')        self.assertTrue('email' in response.data)        data = {            "age": "20",            "gender": "F"        }        data = json.dumps(data)        response = tester.post('/update_profile', data=data, content_type='application/json')        self.assertTrue("Information changed successfully." in response.data)if __name__ == '__main__':    unittest.main()